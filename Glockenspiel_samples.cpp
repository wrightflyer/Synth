#include "Glockenspiel_samples.h"

static const PROGMEM uint32_t sample_0_Glockenspiel_GLKN285[256] = {
0x0ebf0000,0xa7dae5d8,0xd7177c27,0x2ae209b7,0xe1be09e1,0x1b2b0849,0xe1e8cca7,0xe3fe2fd8,
0x3589b1db,0xf9322f7b,0x3609cc59,0xd9be2814,0x24bbdddf,0xcaec1df4,0x3290f625,0xd239f498,
0x227712b3,0xe9f9de4b,0x0b831daa,0xfbf6d7d3,0xff902be8,0x114dda54,0xe73b2a27,0x21f6e8b1,
0xd8fb1368,0x2003f76f,0xdb55f673,0x1b4b0814,0xe86ae912,0x1480156b,0xfb5ae5c4,0x055925c5,
0x0b51e28b,0xebe222b0,0x17fde928,0xdc450d63,0x19d8f2a4,0xe0b1fa80,0x1e5a0469,0xe877ef5b,
0x1b56198d,0xf917e78e,0x02a1285e,0x082cdf47,0xe9c92007,0x12f3e49e,0xddad0b91,0x1dceef0b,
0xe17101a5,0x25500467,0xe7d8f3f6,0x1d111ea5,0xf50de5b7,0xfea325dc,0x0371dc19,0xea851ca8,
0x0fc4df3e,0xe2960f6e,0x247bee82,0xe0fe0895,0x2a8506dd,0xe603f64f,0x19a91f45,0xeed0e263,
0xfd6a1fe0,0xfeabda21,0xee151b62,0x1226dba0,0xe7b1183f,0x2a61efac,0xdfd40cf0,0x2a7b08c2,
0xe255f60a,0x13ed1a1b,0xe855df3e,0x01331b5f,0xfb9cd8b5,0xf4711e7a,0x187edbdf,0xea5820d0,
0x2c23f146,0xdd880da4,0x25d4071a,0xdc4ef48c,0x10fc1117,0xe493dee2,0x08311b26,0xfcd4d802,
0xfb332595,0x1deddeaa,0xea132526,0x27a2f0b3,0xdabf0beb,0x1f720158,0xd5bef2f8,0x14bb0a2b,
0xe460e16a,0x10101ef7,0x016cd963,0xff7d2c3f,0x1e04e1a1,0xe71923cb,0x1f6cec59,0xd78a0ad9,
0x1b6df8cc,0xd2aff38f,0x1d6b0980,0xe7b7e52e,0x161b24aa,0x0531dc44,0x008c2eaf,0x1682e1be,
0xe39f1ec2,0x1811e5d7,0xd44c0b8e,0x1d8cf208,0xd4cdf75a,0x26b30e42,0xec74e957,0x186727d5,
0x0452df52,0xfe3a2bab,0x0ac4dd1e,0xe1d31b1b,0x14dddf7f,0xd3920e42,0x24ddf125,0xdb27fcef,
0x2c481461,0xef09ec70,0x165e25f0,0xfef0e0f7,0xf7d723ae,0x0482d82c,0xdf6f17b1,0x18f2e1ca,
0xd7c40bbb,0x28f6fd8e,0xe805fc40,0x24261c20,0xf423eaa1,0x0c40214a,0xfbfaddb5,0xed951c14,
0x0911d66a,0xdd9715dd,0x20fdebef,0xdeaf0917,0x2b8d0a54,0xed36fb60,0x1cfc1b51,0xf070e565,
0x04e81d3c,0xf8bad651,0xe86b1ada,0x11d2d8cb,0xe0a21986,0x2718f476,0xe5230afd,0x2bdc0e07,
0xe81cf964,0x18651406,0xe8eedf7a,0x01751b47,0xf6e1d1c1,0xed741f2c,0x17a2dedd,0xe87f206e,
0x287cf4cc,0xe7f91191,0x285f04b5,0xdc9af90c,0x188c0849,0xdedbe0f6,0x06fa1847,0xf4a6d541,
0xfc5f26a0,0x166be3ad,0xf1d7261a,0x2413eecf,0xe64a16c0,0x2087f515,0xd387fa7a,0x1ae6ff8a,
0xd9b6e714,0x10b91738,0xf669dec2,0x0a5c2bbe,0x0ff6e5b2,0xf8aa26dc,0x1a10e658,0xe1c117f1,
0x18e0e616,0xd0f6fff9,0x1f25fb47,0xda59f0ca,0x1ceb1753,0xf728ea7b,0x13822a71,0x0489e40b,
0xfca6240c,0x0c69dcce,0xdf1117bb,0x1546dcb8,0xd54d0a1e,0x2421f9ba,0xdf4bfc9a,0x274e1612,
0xf2baf3be,0x174021d1,0xf68de0c2,0xfec21f90,0xff3bd4d4,0xe29e198f,0x15efdb04,0xde371647,
0x27fbf83f,0xe51e085a,0x2b8e105e,0xe8a9f822,0x17e114d6,0xe909defa,0x00001b47,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,

};

static const PROGMEM uint32_t sample_1_Glockenspiel_GLKN385[256] = {
0x3bbc0000,0x2f2f9088,0x019818b0,0xb9424034,0x9e114b34,0xea0523f0,0x7c27b139,0xf90de492,
0xa512580f,0x1b0e1e7e,0x4fa7b2b4,0xfca2cce1,0xbc2231ba,0xed63349d,0x443aceb9,0x1401c8b1,
0xc1832234,0xdc1744c1,0x28d2f3d0,0x2192c4dc,0xd6730137,0xda8736d6,0x24340b79,0x32f0cc4c,
0xecc9ed66,0xc56d2efe,0x038e18e4,0x31b7d7b4,0xfdacdeaa,0xca9d2e3c,0xf2d634e1,0x3428e58c,
0x145ccae1,0xcc030948,0xe31232db,0x2eb2f756,0x3022c8f0,0xde24016e,0xc8e33ab9,0x125c11e4,
0x2c0ec975,0xee8fe551,0xc7033590,0x080628f3,0x41d6da12,0x08a5cfc6,0xc5c11969,0xe82c2ed6,
0x3542e383,0x225bca31,0xcfd8127c,0xd65944cc,0x21c10784,0x2992c112,0xdd49f108,0xc6b43618,
0x1b88186c,0x44b6cd5b,0xfe74dbd3,0xc2a02ebf,0xf2e027c7,0x37e4d643,0x0bf3cbb6,0xc5d32018,
0xe59c4670,0x33a5f775,0x2800c357,0xce1cfe53,0xcd823512,0x265704f1,0x3e56c0ca,0xf158ee00,
0xc3083f1d,0x068922e1,0x35ebce7d,0xf714d053,0xbe422b57,0xf35b39d3,0x44a2e5ff,0x20d4ca42,
0xc8460ea0,0xd8ba37b4,0x2b6cefd8,0x3103b9de,0xdd1afe6d,0xca2a46d4,0x1ba21deb,0x349dc8c7,
0xe937de43,0xb93431e1,0x022b2525,0x4abad502,0x14c9cf9f,0xcbc92145,0xe1eb38f1,0x2815ea80,
0x25b9c00f,0xdd12f6f7,0xd1393afd,0x122f23eb,0x3757d808,0xfe33ddbb,0xbdad1eaf,0xeaf02968,
0x34f5e734,0x2644c80a,0xde191071,0xd96d3c66,0x24b90080,0x2893c113,0xdc24e902,0xc7203a80,
0x11901fb2,0x4202d67b,0xf997e56e,0xc1822a9b,0xfa4b2523,0x372acd1a,0x10b5c9e1,0xcaaf233c,
0xf2003ad4,0x3829f25b,0x131dc806,0xc53f0d67,0xd2d93792,0x2f27f543,0x33b7c87a,0xe10affe5,
0xd77d3f4c,0x1ba30944,0x2f06bd46,0xe0c6e888,0xc25134f6,0x146424f9,0x3da0d788,0xfd36e175,
0xc1662f27,0xf7892041,0x3be6d053,0x0bc4c95c,0xce4120a5,0xf12f3f56,0x3612ed44,0x1781cbc7,
0xc0350c23,0xd6ed35c2,0x2d97f95e,0x3259c363,0xe4ff041d,0xd2733d51,0x201f0833,0x2cc4c0e8,
0xe025e37b,0xc5be398d,0x0f7b2241,0x426ed737,0xfa4be485,0xc1862a4a,0x00002523,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,

};

static const PROGMEM uint32_t sample_2_Glockenspiel_GLKN585[128] = {
0x4aee0000,0x2cef93e3,0xe2bb7c27,0x94deca95,0x327751fc,0xe371ff49,0xf02503a4,0xe9c60e37,
0x07cc0a51,0x07ce0ce9,0xecaaf664,0xf6dafb0b,0x0d1d162b,0xfde207eb,0xf0b1ea56,0x0365002e,
0x06701c7f,0xf2d10056,0xfb74e72a,0x0eb90722,0xface1a13,0xea7ef862,0x08c6ed64,0x14a30dac,
0xee620ee2,0xe8d2f2c0,0x1453fb87,0x12af1094,0xe5b0fdeb,0xef33f215,0x19f20d28,0x09060de5,
0xe494ec9f,0xfbeef772,0x16cc1c16,0xfae105af,0xec6be0fa,0x0aaf0192,0x0b0d22bc,0xed46fa45,
0xfba5dfa7,0x16200cf6,0xf9f61e20,0xe586efaf,0x0d8be9ad,0x19b81539,0xe90d0f15,0xe6dbea2f,
0x1c90fc16,0x132016e6,0xdd0efb03,0xf1a0ecaa,0x24c810df,0x05d40f0b,0xdb15e6e4,0x0090f979,
0x1f1521d2,0xf754ff8c,0xe7d5da4f,0x0dc4093c,0x0cc0288a,0xec3bf136,0xfda8d9da,0x169614d9,
0xf609224e,0xe6b4e89e,0x13bbe605,0x183e19c7,0xe2611155,0xe90be7ad,0x2368fa7a,0x12141690,
0xd7fafaf3,0xf294ee9a,0x27b810d5,0x060b0c6c,0xda2ee64f,0x0040fb30,0x1f512201,0xf7f3fe6c,
0xe835d9fa,0x0d9f096e,0x0cb928b2,0xec4cf11e,0xfda8d9c6,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,

};

static const PROGMEM AudioSynthWavetable::sample_data Glockenspiel_samples[3] = {
	{
		(int16_t*)sample_0_Glockenspiel_GLKN285, // sample
		true, // LOOP
		9, // LENGTH_BITS
		(1 << (32 - 9)) * WAVETABLE_CENTS_SHIFT(0) * 22050.0 / WAVETABLE_NOTE_TO_FREQUENCY(85) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)445 - 1) << (32 - 9), // MAX_PHASE
		((uint32_t)444 - 1) << (32 - 9), // LOOP_PHASE_END
		(((uint32_t)444 - 1) << (32 - 9)) - (((uint32_t)326 - 1) << (32 - 9)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(3300.08 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(3600.84 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(-144.0)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(334.10 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(1) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(-1)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_1_Glockenspiel_GLKN385, // sample
		true, // LOOP
		9, // LENGTH_BITS
		(1 << (32 - 9)) * WAVETABLE_CENTS_SHIFT(0) * 22050.0 / WAVETABLE_NOTE_TO_FREQUENCY(91) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)317 - 1) << (32 - 9), // MAX_PHASE
		((uint32_t)316 - 1) << (32 - 9), // LOOP_PHASE_END
		(((uint32_t)316 - 1) << (32 - 9)) - (((uint32_t)232 - 1) << (32 - 9)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(3300.08 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(3600.84 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(-144.0)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(334.10 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(1) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(-1)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_2_Glockenspiel_GLKN585, // sample
		true, // LOOP
		8, // LENGTH_BITS
		(1 << (32 - 8)) * WAVETABLE_CENTS_SHIFT(0) * 22050.0 / WAVETABLE_NOTE_TO_FREQUENCY(102) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)170 - 1) << (32 - 8), // MAX_PHASE
		((uint32_t)169 - 1) << (32 - 8), // LOOP_PHASE_END
		(((uint32_t)169 - 1) << (32 - 8)) - (((uint32_t)125 - 1) << (32 - 8)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(3300.08 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(3600.84 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(-144.0)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(334.10 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(1) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(-1)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
};

static const PROGMEM uint8_t Glockenspiel_ranges[] = {87, 91, 127, };

const PROGMEM AudioSynthWavetable::instrument_data Glockenspiel = {3, Glockenspiel_ranges, Glockenspiel_samples };

