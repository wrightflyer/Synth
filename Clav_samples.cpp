#include "Clav_samples.h"

static const PROGMEM uint32_t sample_0_Clav_CLAVI48[384] = {
0xfd6f0000,0xf41df605,0xf368f0b2,0xf9f3f938,0xfde7fa20,0xfff2ff54,0xfdebfff6,0xf832fb92,
0xfba5f0ae,0xf57bf0e7,0x017502fe,0xdc0bed31,0xd616cf0d,0xe88fd8c9,0xfd0807f3,0x264bf8ad,
0x6faa53c1,0x717e714e,0x6def71f1,0x704f6ec2,0x36d56098,0xdd4b0149,0xb879c538,0xae42b278,
0xa217a7a3,0xa2329e81,0xa530a752,0xb642aa1a,0xce9bc36a,0xe7f8db7b,0xfcf2f3cd,0x0b07031d,
0x0c070d7d,0x0d210d4e,0x0f6c0c9e,0x128412a0,0x17f9151f,0x23bb1f0d,0x20552067,0x1ae91fc3,
0x11be1517,0x09000cf4,0x033e0478,0x0635073b,0x09200524,0x0d340c6d,0x12800ea1,0x16c614d8,
0x1cc61706,0x1d5020b8,0x1dd91ce4,0x18241c19,0x12e61565,0x09e90f47,0x077105aa,0xfb9f00f4,
0xf260f697,0xe934ecab,0xe556e77a,0xe4c5e574,0xec27e89c,0xef14ecc7,0xf220f035,0xf358ef7c,
0xf71af405,0xfe3cf98b,0x06a70516,0x0a0a085b,0x05c40a05,0x02090285,0xfc18fd75,0xfddef9b9,
0xf93afc6b,0xf5e2f772,0xea89f153,0xe7e1e928,0xe5b5e5e9,0xf0f0e9db,0xf708f239,0x052dfca2,
0x0bca0632,0x1852110c,0x1f5b18d6,0x25752069,0x1c1b1e09,0x11b418b9,0x09a70b1b,0x086202f3,
0x04e908e4,0x0e0010b4,0x02b40350,0xf884f93c,0xcb67e773,0xe38fe12d,0xea72e16f,0xd270e8e0,
0xbb1eb010,0xdddfe13a,0xd583cef1,0x04f3e937,0x698b39b9,0x75717601,0x79c27815,0x7a0c7c27,
0x5ba77365,0x11743437,0xe39af888,0xd059da6a,0xb929c5af,0xa995ae49,0x9e32a404,0xa8439ec8,
0xb9cbb12a,0xce19c366,0xdc4ed8bb,0xe8cce25c,0xeeafec4b,0xf940f280,0x0227fdbe,0x092504d3,
0x0e8f0bd0,0x154512b9,0x1c5b1884,0x25212279,0x288727d2,0x256b25df,0x24942364,0x225b228e,
0x286123d4,0x2bf72982,0x2e6e2ee2,0x25932b21,0x1e2122d5,0x115d16b6,0x0b890d77,0x012d04cc,
0xf9e2fda7,0xeadff1dd,0xe356e620,0xdce8e05b,0xe35de106,0xe560e314,0xec17e7e1,0xed44ebe1,
0xf560ef6c,0xf97cf695,0x027f0002,0x00f802e2,0x02f20248,0xffa9014c,0x03c0ffc2,0x0125ffd4,
0xff7700b9,0xf66afa50,0xf33ff293,0xec7eede4,0xf1b6ed9f,0xf870f115,0xfd3af945,0xfdfffe88,
0x041a0326,0x06e804e4,0x0b4c0915,0x12bc128b,0x167417b5,0x184b1487,0x0d3d1232,0x02fc13da,
0x00380499,0xf9edf9b2,0xf1cbec54,0xe871f532,0x028df5ca,0xfb32009a,0x15640405,0xfc460c51,
0xf9d200d1,0xf0c2e5d0,0x0c34106a,0xd984ee79,0xde39d7ad,0xeb81e941,0xc975dc0d,0xf056cb7a,
0x485e209c,0x5d5859b3,0x6dac6591,0x6ffd70b5,0x5b9a6b1f,0x1b593e64,0xeb84fce7,0xd598dd9c,
0xc4d4cd79,0xb928bf26,0xaed1b352,0xaea7aea8,0xb98bb334,0xcc3ac190,0xd733d1e2,0xe1f0dc4b,
0xe290e155,0xe679e31c,0xed38eadd,0xff66f55a,0x07b30329,0x16610f46,0x1d831a6c,0x2b622335,
0x2ab02ac7,0x2e4d2db2,0x24dd290b,0x251025d3,0x1cb0206c,0x22061f29,0x221f2159,0x244b2575,
0x1d921eff,0x197d1b7d,0x0cb013af,0x0b450b8e,0x072a094f,0x0149050c,0xfa03fd02,0xf7dff79d,
0xf18df320,0xf1daef88,0xf183f175,0xeda5efb4,0xeb15ebdf,0xe813e5f3,0xe555e645,0xe47de343,
0xe6a6e6a0,0xe787e652,0xed36f049,0xf529f18d,0xfa58f947,0xfd24facc,0xff0a02e4,0x000afe68,
0xffdb0127,0x00670128,0x01dc0836,0x0b8b04c8,0x0efb080a,0x07250952,0x067e0eb1,0x0cb80a2d,
0x0f590be2,0x0f000b49,0x0bdf14d9,0x0b230acb,0xfe7109c6,0xff4cf8f5,0xeedbf922,0x01dff457,
0xffb3025b,0x10620b00,0x0f4b0943,0x0a0d164b,0xe903f6ed,0xf501e83c,0x00e403d5,0xcf65e809,
0xd467c9a6,0xdf48e174,0xb6b2c9b4,0xe3b8bdfc,0x3db115d1,0x5cd2524d,0x712667c0,0x7456743a,
0x684d71b4,0x3213520b,0xff55149f,0xe093ed39,0xc987d55b,0xb8c7c002,0xae79b2e9,0xaad0ab21,
0xb4abaede,0xc420bc01,0xd08ac9bc,0xdc7cd678,0xe1cfdeb5,0xe734e442,0xf123ebea,0x0047f8c7,
0x09f50474,0x16a9113b,0x1f791ae7,0x2a3e245c,0x2b4b2a7b,0x2ac22cab,0x232225f1,0x21aa2325,
0x1af21d70,0x1f7b1cfa,0x21941f8c,0x226c2409,0x1dce1ddf,0x19a81c3a,0x0e39140b,0x0c730cda,
0x086c0a5f,0x01890625,0xfabefdb5,0xf84ef8c0,0xf1fdf3ce,0xf23bf089,0xf1bff1a0,0xedd4eff8,
0xeb1bec07,0xe82ee677,0xe585e65d,0xe4a4e394,0xe6ade6aa,0xe787e65b,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static const PROGMEM uint32_t sample_1_Clav_CLAVI60[256] = {
0x00910000,0x01b6ffe2,0x0f9afd4c,0x38242dbb,0x33fc37bc,0x06332a46,0xdc1be7b0,0xd11de04f,
0x8de0bdbc,0x90b292fb,0x97d39874,0x1212e3cb,0x1b9011e8,0x25ed27f4,0x17f02414,0x25a22231,
0x19311df8,0x1fc21c9e,0x196a1ce8,0x1ba919ad,0x16621b60,0x0a510ef6,0x09dc0ab5,0x026f04f3,
0x06df053a,0x023f041f,0x04a80431,0x001e01bd,0x00d300ef,0x029a0103,0xfdce01f0,0xfc67fc47,
0xf243f7b2,0xf4c5f369,0xed40f03e,0xf30ef06c,0xf257f124,0xf56ef676,0xf17ef1e2,0xeddcf283,
0xecf2ebad,0xeb94eec6,0xf8abe9b4,0xecdff013,0x2288ffc4,0x333230e8,0x3e9e4499,0x08fc15ce,
0xed41e9a0,0xd714eaa7,0xa1b7b4ab,0x8a53a7f9,0xd2469809,0x0e0ffca9,0x2b571e0e,0x2d22324b,
0x2e8428e9,0x30a4367c,0x266125f9,0x266c2cf7,0x153f1a4c,0x131e175e,0x09fb0d13,0x06f30911,
0x05520612,0x023d038b,0x06d905f7,0x010202e3,0x042404a1,0xfda2ff29,0xfd3affc3,0xf8fbf9ae,
0xf490f82d,0xf366f3d0,0xef55f208,0xf326f232,0xef4af12a,0xf12ff1c1,0xee46ee8a,0xf12ff2a5,
0xef27f19f,0xeee0f6b4,0xf616f467,0xf7aff425,0xf9b1fe86,0xfb96f2cd,0x242e20a5,0x4b773cd9,
0x3a6240f5,0xfacf0f31,0xfa87f071,0xbd3de0c5,0xab43bb5b,0x8ad9844d,0xe15cb8a3,0x0c05f7cf,
0x24aa1d39,0x20cb21a2,0x2cc7258c,0x24072996,0x295e2333,0x20a52942,0x196d199a,0x12101827,
0x09b10ad0,0x066d08b3,0x011d02b5,0x00f3001f,0xfe640030,0xfdd3fc7f,0xfbd8fe00,0xfac5f9d8,
0xf8def970,0xf658f672,0xf4f6f4b7,0xf27bf3a7,0xf3fbf17d,0xf298f28b,0xf3eff017,0xf2fff061,
0xf548f0ad,0xf37ef524,0xf6ddf96f,0xfe64f776,0xfdbbfd3a,0x0c6e0091,0xf03905f6,0x0bd50a95,
0x35f62440,0x4feb46e6,0x26bf44d4,0xfa11ff17,0xe374ff1e,0xc74bca6a,0x8974af63,0xa21a83d9,
0xe626c7db,0x10f1fe76,0x1e4a1d58,0x1e621ab0,0x261d25ea,0x1bf31de5,0x254a23a9,0x18041dfc,
0x19c219b9,0x101c143c,0x0cbc0f18,0x07bc0a2b,0x01020453,0x028501d5,0xfbe0ff6c,0xfea4fe40,
0xf92dfb75,0xfb8bfb48,0xf88ff8d8,0xf9e4fba5,0xfb43fa4a,0xf94ffcc8,0xfce4fa7b,0xf9aafac9,
0xfcb4f710,0xf58ff512,0xf5f9f7cf,0xf4c2f4a3,0xf526efab,0xf851edb5,0xf5d6e523,0xeadcfca4,
0xe791ebd2,0x03cbf4aa,0x295219b8,0x486c3995,0xfe0c2708,0x0042febc,0xd566e674,0xc0d8d6af,
0x8b129900,0xbc099e9d,0xf8b1dba4,0x227e1204,0x292e28c9,0x2b0d27be,0x2af52e53,0x212a22b1,
0x26a82717,0x18fc1e86,0x19e41a41,0x0000143c,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static const PROGMEM uint32_t sample_2_Clav_CLAVI72[128] = {
0x02900000,0x2c15feae,0x28af3915,0xd62ee60f,0x8f16b257,0xdaae8ee5,0x21741cc0,0x1d7a135e,
0x18db2324,0x168c213a,0x0c2e1ee6,0x03360d25,0x031106ba,0x015b04fc,0x00ff0189,0xfbfc01e8,
0xf1c0f853,0xedd6f223,0xf276f447,0xed9bf5a5,0xe900ef9b,0xed06f148,0x2fda03b3,0x1fe64206,
0xe85eee9c,0x97e2b894,0xf9b59e06,0x31fc1eb7,0x35772aa9,0x2ae22886,0x14f41cdb,0x07510f40,
0x0241078b,0x02db066e,0x001a03ff,0xfaaafe4b,0xf3b4f718,0xf0fef184,0xefa5f1e0,0xef56f027,
0xf049f2b5,0xf393f524,0xf317fdf3,0x3a9d18be,0x0ff14b31,0xddb5f7b5,0x8ad2b651,0xfd8db0aa,
0x259f19a0,0x2cca242a,0x2b65224d,0x1a16189d,0x0a8f09f0,0x0228014c,0xfea0fe74,0xfbbcfc14,
0xf80ff879,0xf4a6f3d3,0xf437f0c2,0xf36aefdc,0xf6d7f051,0xfbfbf430,0x0647fa61,0x013d0112,
0x49512308,0x064e4427,0xd215f57a,0x83d9a97b,0xfe1ec697,0x1bb11d70,0x1f692594,0x2005227b,
0x16dc180d,0x0c6a0ce5,0x03520266,0xfe8bfe17,0xfb0bfb08,0xfa53f930,0xfbb9fa4f,0xfbd2fa2b,
0xf8a3f7fd,0xf6f5f484,0xf447efc1,0xf978ebff,0xf72de5a4,0x43051394,0xfd5d2429,0xcfe9ea39,
0x9a899d5c,0x175de429,0x328633db,0x2b943b96,0x2254325e,0x15fe2203,0x08651284,0xfd360216,
0xf4b6f918,0xef94f1ef,0xf196f125,0xf404f561,0xf7e5f8a2,0xf454f92e,0xf41ef76a,0xf332f642,
0xfa96f874,0xfb5be9a1,0x42281b8c,0xfaa41383,0xc80fe1f8,0xa3ac8eb3,0x1ea3e635,0x3afc31db,
0x34833c4d,0x29db375b,0x191e2650,0x08ff141c,0xfc8b021c,0xf3adf7ab,0xeeddf073,0xf033ef5c,
0xf218f2c1,0xf696f656,0xf41ef7eb,0xf44df725,0x0000f642,0x00000000,
};

static const PROGMEM uint32_t sample_3_Clav_CLAVI84[128] = {
0x01730000,0x0bcafdf6,0xf4ff42f3,0x83d99b4d,0x27aa174c,0x21e02583,0x0b411ec5,0x039706a8,
0xffd8025b,0xeb6ef7a6,0xeec4f116,0xe492ec61,0x46170925,0xac0e0035,0x260c9339,0x39f8376c,
0x141022b7,0x0760050f,0x003701d6,0xf150f394,0xee9ceb5e,0xf5adea02,0x19e0eec6,0x000e4b87,
0x966ea708,0x29bb2110,0x22fa34fe,0x01e2158a,0xf9540275,0xefe6fb62,0xeb27f34f,0xeec6f385,
0xfa1202b8,0x4cb22701,0x9ca1fa41,0x218c9b44,0x2e5e221d,0x18511cd2,0x037203ae,0xfc1cf80a,
0xfe41f57f,0xf995f3ed,0xf57eea94,0x158be160,0xefd13747,0xafc09b90,0x2f0e3400,0x1e4c344a,
0x03ae18b8,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
};

static const PROGMEM uint32_t sample_4_Clav_KOTO_A2A[128] = {
0xfd2c0000,0xfdf408a6,0xdee7f652,0x09e1238f,0xfbed0f02,0x43c0d2a7,0x0390c2c9,0x081c0adb,
0xf7be077a,0xccde2282,0x097effc5,0x0ae21a46,0x28edce97,0xffefbc62,0x18d33e71,0xd3cb07ce,
0xb3e625a3,0x2f37ff85,0x0e7c2741,0x184ec603,0x0437aba5,0x40263151,0xcb7a00d1,0x9f7a0df9,
0x41540211,0x171d53b6,0xff0eb71c,0xf60f9e41,0x686a4044,0xb4cd1a0f,0x976df774,0x43b1f5dd,
0x1b746f13,0xf75aaf3c,0xeae39ea2,0x779c4028,0xae531613,0xa156f67a,0x39f3edf3,0x1b776f65,
0xf143be11,0xf7849738,0x75bc3b0d,0xb12f1117,0x95bae918,0x411dfdfb,0x19087c27,0xdc84afc8,
0x0c2c9c73,0x79a93916,0xa2c814c1,0xa820d8bf,0x37d41768,0x16c875fe,0xd289a42b,0x22bfa470,
0x745b4099,0x9f911026,0xa743cec5,0x4bd923dd,0x056e7947,0xc9d9a16f,0x2cb2a6cd,0x7adf470b,
0xa0b902c1,0x9f5dcee9,0x4d1d2b23,0xfec474f5,0xd830a4b9,0x2b399ea8,0x6d704bb7,0xa6f3fdea,
0xa39fd739,0x47ca294b,0xfc2e6bab,0xda3ba9c0,0x24f8a1a0,0x68d549ff,0xb4c5fadb,0xa3bbd72f,
0x473b23bb,0xf2ad66f6,0xd5b7b94b,0x2979a8b2,0x6b813df6,0xbc8ff08c,0xa6bade40,0x36fb2c6d,
0xf3216080,0xde0fbc3e,0x2db4b1c8,0x5c5c39e7,0xc07bef48,0xb52bd829,0x38422f11,0xec8a5711,
0xdb30c497,0x2c67b7a7,0x53b93779,0xcc29ee2c,0xbae3de62,0x34042850,0xea0452c4,0xe063cdfe,
0x25f0ba9e,0x54793055,0xd304e912,0xbbb2e0bd,0x2fc723dc,0xe912540b,0xe0bdd304,0x23dcbbb2,
0x540b2fc7,0x0000e912,0x00000000,0x00000000,0x00000000,0x00000000,
};

static const PROGMEM AudioSynthWavetable::sample_data Clav_samples[5] = {
	{
		(int16_t*)sample_0_Clav_CLAVI48, // sample
		true, // LOOP
		10, // LENGTH_BITS
		(1 << (32 - 10)) * WAVETABLE_CENTS_SHIFT(0) * 22050.0 / WAVETABLE_NOTE_TO_FREQUENCY(48) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)636 - 1) << (32 - 10), // MAX_PHASE
		((uint32_t)635 - 1) << (32 - 10), // LOOP_PHASE_END
		(((uint32_t)635 - 1) << (32 - 10)) - (((uint32_t)467 - 1) << (32 - 10)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(3200.58 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(235.02 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(-5.1)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(334.10 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_1_Clav_CLAVI60, // sample
		true, // LOOP
		9, // LENGTH_BITS
		(1 << (32 - 9)) * WAVETABLE_CENTS_SHIFT(0) * 22050.0 / WAVETABLE_NOTE_TO_FREQUENCY(60) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)375 - 1) << (32 - 9), // MAX_PHASE
		((uint32_t)374 - 1) << (32 - 9), // LOOP_PHASE_END
		(((uint32_t)374 - 1) << (32 - 9)) - (((uint32_t)290 - 1) << (32 - 9)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(3200.58 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(235.02 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(-5.1)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(334.10 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_2_Clav_CLAVI72, // sample
		true, // LOOP
		8, // LENGTH_BITS
		(1 << (32 - 8)) * WAVETABLE_CENTS_SHIFT(0) * 22050.0 / WAVETABLE_NOTE_TO_FREQUENCY(72) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)249 - 1) << (32 - 8), // MAX_PHASE
		((uint32_t)248 - 1) << (32 - 8), // LOOP_PHASE_END
		(((uint32_t)248 - 1) << (32 - 8)) - (((uint32_t)206 - 1) << (32 - 8)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(3200.58 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(235.02 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(-5.1)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(334.10 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_3_Clav_CLAVI84, // sample
		true, // LOOP
		7, // LENGTH_BITS
		(1 << (32 - 7)) * WAVETABLE_CENTS_SHIFT(0) * 22050.0 / WAVETABLE_NOTE_TO_FREQUENCY(84) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)98 - 1) << (32 - 7), // MAX_PHASE
		((uint32_t)97 - 1) << (32 - 7), // LOOP_PHASE_END
		(((uint32_t)97 - 1) << (32 - 7)) - (((uint32_t)76 - 1) << (32 - 7)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(3200.58 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(235.02 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(-5.1)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(334.10 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
	{
		(int16_t*)sample_4_Clav_KOTO_A2A, // sample
		true, // LOOP
		8, // LENGTH_BITS
		(1 << (32 - 8)) * WAVETABLE_CENTS_SHIFT(0) * 22050.0 / WAVETABLE_NOTE_TO_FREQUENCY(103) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)227 - 1) << (32 - 8), // MAX_PHASE
		((uint32_t)226 - 1) << (32 - 8), // LOOP_PHASE_END
		(((uint32_t)226 - 1) << (32 - 8)) - (((uint32_t)212 - 1) << (32 - 8)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(3200.58 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(235.02 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(-5.1)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(334.10 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(5.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
};

static const PROGMEM uint8_t Clav_ranges[] = {46, 65, 78, 95, 127, };

const PROGMEM AudioSynthWavetable::instrument_data Clav = {5, Clav_ranges, Clav_samples };

